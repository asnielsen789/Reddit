@page "/"
@using Reddit.Shared.Models;
@using Reddit.Client.Services;
@using System.Text.Json;
@inject ApiService apiService
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage

@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration

@if (threads == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table>
        <tr>
            <th>Title</th>
            <th>Content</th>
            <th>Created at</th>
            <th>Created by</th>
            <th colspan="5">Votes</th>
        </tr>
        @foreach (var thread in threads)
        {
            <tr>
                <!--
        These a href links will match the route in the page 'PostItem.razor'.
        The route is defined as "/post/{id}" and the id is the post id.
    -->
                <td><a href="/thread/@thread.RedditThreadId">@thread.Title</a></td>
                <td>@thread.Content</td>
                <td>@thread.CreatedAt</td>
                <td>@thread.User.Name</td>
                <td>@(thread.calculateVotes())</td>
                <td><button @onclick="() => Upvote((int)thread.RedditThreadId)">Upvote</button></td>
                <td><button @onclick="() => Downvote((int)thread.RedditThreadId)">Downvote</button></td>
            </tr>
        }
    </table>

    <br />
}

<hr />

<h3>Create new thread</h3>
<h6>Insert title</h6>
<input @bind=@newThread.Title type="text" />
<br>
<h6>Insert Content</h6>
<textarea @bind=@newThread.Content></textarea>
<br>
<h6>Insert username</h6>
<input @bind=@newThread.User.Name type="text" />
<br>
<button @onclick="SubmitThread">Submit</button>


@code {
    private RedditThread[]? threads;
    private Vote? vote;

    private RedditThread newThread { get; set; }

    private User? currentUser { get; set; }

    protected override async Task OnInitializedAsync()
    {
        threads = await apiService.GetThreads();
        var sessionString = await sessionStorage.GetItemAsync<string>("User");

        if (sessionString != null && sessionString != "")
        {
            currentUser = JsonSerializer.Deserialize<User>(sessionString);
        }
        else
        {
            currentUser = null;
        }
    }

    protected override void OnInitialized()
    {
        //Name = "ID: " + await sessionStorage.GetItemAsync<string>("ID") + "Name : " + await sessionStorage.GetItemAsync<string>("Name");
        newThread = new RedditThread();
        newThread.User = new User("Mark Gurban", "mark@mail.com");
        newThread.User.UserId = 2;
    }

    private async Task Upvote(int id)
    {
        vote = new Vote(true, new User($"{newThread.User.Name}", $"{newThread.User.Email}"));
        vote.User.UserId = 1;

        string response = await apiService.voteThread(id, vote);
        threads = await apiService.GetThreads();
        Console.WriteLine(response);
    }

    private async Task Downvote(int id)
    {
        vote = new Vote(false, new User("Bob Dylan", "bob@mail.com"));
        vote.User.UserId = 1;

        string response = await apiService.voteThread(id, vote);
        threads = await apiService.GetThreads();
        Console.WriteLine(response);
    }

    private async Task SubmitThread()
    {
        newThread.CreatedAt = DateTime.Now;
        await apiService.CreateThread(newThread);
        threads = await apiService.GetThreads();

        newThread = new RedditThread();
        newThread.User = new User("Mark Gurban", "mark@mail.com");
        newThread.User.UserId = 2;
    }
}
