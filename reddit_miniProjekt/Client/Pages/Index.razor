@page "/"
@using reddit_miniProjekt.Shared.Models;
@using reddit_miniProjekt.Client.Services;
@inject ApiService apiService

@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration

@if (threads == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table>
        <tr>
            <th>Title</th>
            <th>Content</th>
            <th colspan="3">Votes</th>
        </tr>
        @foreach (var thread in threads)
        {
            <tr>
                <!--
                    These a href links will match the route in the page 'PostItem.razor'.
                    The route is defined as "/post/{id}" and the id is the post id.
                -->
                <td><a href="/post/@thread.RedditThreadId">@thread.Title</a></td>
                <td>@thread.Content</td>
                <td>@(thread.calculateVotes())</td>
                <td><button @onclick="() => Upvote((int)thread.RedditThreadId)">Upvote</button></td>
                <td><button @onclick="() => Downvote((int)thread.RedditThreadId)">Downvote</button></td>
            </tr>
        }
    </table>

    <br />
}

@code {
    private RedditThread[]? threads;
    private Vote? vote;



    protected override async Task OnInitializedAsync()
    {
        threads = await apiService.GetThreads();
    }

    private async void Upvote(int id)
    {

        vote = new Vote(true, new User("Bob Dylan"));
        vote.User.UserId = 1;

        string response = await apiService.voteThread(id, vote);
        Console.WriteLine(response);
    }

    private async void Downvote(int id)
    {
        vote = new Vote(false, new User("Bob Dylan"));
        vote.User.UserId = 1;

        string response = await apiService.voteThread(id, vote);
        Console.WriteLine(response);
    }
}
